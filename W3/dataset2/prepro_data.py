import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.model_selection import train_test_split

#  ƒê·ªçc d·ªØ li·ªáu g·ªëc 
file_path = "W3/dataset2/merged.csv"
data = pd.read_csv(file_path)

#  **Hi·ªÉn th·ªã th√¥ng tin tr∆∞·ªõc khi x·ª≠ l√Ω**
print("Tr∆∞·ªõc khi x·ª≠ l√Ω:", data.info())

#  **X·ª≠ l√Ω c·ªôt "mod_date" (chuy·ªÉn timedelta th√†nh s·ªë gi√¢y)**
try:
    data['mod_date'] = pd.to_timedelta(data['mod_date']).dt.total_seconds()
except Exception as e:
    print("L·ªói chuy·ªÉn ƒë·ªïi mod_date:", e)

#  **Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë**
scaler = MinMaxScaler()
numerical_cols = ['cvss', 'mod_date']
data[numerical_cols] = scaler.fit_transform(data[numerical_cols])

#  **X·ª≠ l√Ω c√°c c·ªôt ph√¢n lo·∫°i (One-Hot Encoding)**
categorical_cols = ['access_authentication', 'access_complexity', 'access_vector', 
                    'impact_availability', 'impact_confidentiality', 'impact_integrity', 'vendor']

# Gi·ªØ l·∫°i **1000 gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t** 
for col in categorical_cols:
    top_values = data[col].value_counts().index[:1000]  
    data[col] = data[col].apply(lambda x: x if x in top_values else "OTHER")

# √Åp d·ª•ng One-Hot Encoding
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
encoded_cols = encoder.fit_transform(data[categorical_cols])
encoded_df = pd.DataFrame(encoded_cols, columns=encoder.get_feature_names_out(categorical_cols))

# G·ªôp l·∫°i v·ªõi d·ªØ li·ªáu ch√≠nh
data = data.drop(columns=categorical_cols).reset_index(drop=True)
data = pd.concat([data, encoded_df], axis=1)

# üîπ **T·∫°o t·∫≠p train & test**
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# üîπ **L∆∞u file ·ªü ƒë·ªãnh d·∫°ng Parquet (gi·∫£m dung l∆∞·ª£ng)**
train_file = "file123_train.parquet"
test_file = "file123_test.parquet"

train_data.to_parquet(train_file, index=False)
test_data.to_parquet(test_file, index=False)

print(f"X·ª≠ l√Ω ho√†n t·∫•t! D·ªØ li·ªáu ƒë√£ l∆∞u t·∫°i:\n   {train_file} (train)\n  üìÇ {test_file} (test)")
print("K√≠ch th∆∞·ªõc t·∫≠p train:", train_data.shape)
print("K√≠ch th∆∞·ªõc t·∫≠p test:", test_data.shape)
